#!/bin/bash

if [ $(id -u) != 0 ]; then
  echo "Error: need to exec as root user" >&2
  exit 1
fi

. /etc/tcos/tcos.conf
. /etc/tcos/version.conf

TCOS_ARCH=i386
TCOS_FLAVOUR=standard
if [ "${DISTRIBUTION}" = "ubuntu" ]; then
  TCOS_MIRROR=http://archive.ubuntu.com/ubuntu
else
  TCOS_MIRROR=http://ftp.de.debian.org/debian
fi
ACTION=
GENTCOS_OPTS="-tftp"

DISTRO_PACKAGES="xserver-xorg xutils libgl1-mesa-dri libgl1-mesa-glx libglu1-mesa 
libnss-db iftop strace twm xterm x11vnc wget dosfstools debootstrap libltdl3 
cdparanoia scrot eject debconf grub syslinux squashfs-tools mknbi dhcp3-client 
dropbear python python-dbus aumix alsa-base libkrb53 acpid console-tools console-data
mtools alsa-utils discover busybox pulseaudio pulseaudio-module-x11 pulseaudio-utils esound"

TCOS_PACKAGES="initramfs-tools-tcos tcos-usplash tinylogin ltspfs-client lp-server"

usage() {
  cat << EOF
tcos-buildchroot usage:

     Actions:
           --create                     (Create chroot)
           --update                     (Update chroot)
           --install=package1,package2  (Install some packages in chroot)
           --update-images              (Update chroot TCOS images)

     Options:
           --arch=xxx      (Set Architecture of chroot, default: $TCOS_ARCH)
           --flavour=xxx   (Set flavour of chroot, default: $TCOS_FLAVOUR)  
           --version=xxx   (Set version of chroot, default: $TCOS_DISTRO)
           --dir=xxx       (Set dir of chroot, default: $TCOS_CHROOT)
           --mirror=xxx    (Set mirror of chroot, default: $TCOS_MIRROR)
           --kversion=xxx  (Set kernel version of chroot, default: $TCOS_KERNEL)
           --gentcos="xxx" (Set gentcos cmdline options)

EOF
}

chrootcreate() {
  TMP=""
  TMP2=""
  for pkg in $DISTRO_PACKAGES ; do
    TMP="$TMP,$pkg"
    TMP2="$TMP2 $pkg"
  done
  mkdir -p ${TCOS_CHROOT}
  echo "Using mirror: ${TCOS_MIRROR}"
  cdebootstrap --arch="${TCOS_ARCH}" --flavour="${TCOS_FLAVOUR}" \
      --include=${TMP} \
      ${TCOS_DISTRO} ${TCOS_CHROOT} ${TCOS_MIRROR}

  if [ $? != 0 ]; then exit $?; fi

  # Add TCOS mirror
  echo "deb http://www.tcosproject.org $TCOS_DISTRO main" >> ${TCOS_CHROOT}/etc/apt/sources.list

  # add GPG key
  cat << EOC | chroot ${TCOS_CHROOT}
export LC_ALL=C
export LC_MESSAGES=C
wget http://www.tcosproject.org/mariodebian-pub.key
apt-key add mariodebian-pub.key
rm mariodebian-pub.key
apt-get update
DEBCONF_FRONTEND='noninteractive' apt-get install -y ${TMP2} ${TCOS_PACKAGES} linux-image-${TCOS_KERNEL} tcos-extra-modules-${TCOS_KERNEL}
apt-get clean
EOC
}

chrootupdate() {
  cat << EOC | chroot ${TCOS_CHROOT}
export LC_ALL=C
export LC_MESSAGES=C
[ ! -e /sbin/start-stop-daemon ] && cat << CMD > /sbin/start-stop-daemon
#!/bin/sh
CMD
[ ! -e /usr/sbin/invoke-rc.d ] && cat << CMD > /usr/sbin/invoke-rc.d
#!/bin/sh
CMD
chmod +x /sbin/start-stop-daemon /usr/sbin/invoke-rc.d
apt-get update
DEBCONF_FRONTEND='noninteractive' apt-get install -y cdebootstrap
dpkg -i /usr/share/cdebootstrap/cdebootstrap-helper-diverts.deb
apt-get -y upgrade
dpkg --remove cdebootstrap-helper-diverts
EOC
}

chrootinstallpkg() {
  cat << EOC | chroot ${TCOS_CHROOT}
export LC_ALL=C
export LC_MESSAGES=C
[ ! -e /sbin/start-stop-daemon ] && cat << CMD > /sbin/start-stop-daemon
#!/bin/sh
CMD
[ ! -e /usr/sbin/invoke-rc.d ] && cat << CMD > /usr/sbin/invoke-rc.d
#!/bin/sh
CMD
chmod +x /sbin/start-stop-daemon /usr/sbin/invoke-rc.d
apt-get update
DEBCONF_FRONTEND='noninteractive' apt-get install -y cdebootstrap
dpkg -i /usr/share/cdebootstrap/cdebootstrap-helper-diverts.deb
DEBCONF_FRONTEND='noninteractive' apt-get -y install $@
dpkg --remove cdebootstrap-helper-diverts
EOC
}

chrootupdateimages() {
TCOS_KERNEL=$(awk -F"=" '/^TCOS_KERNEL=/ {print $2}' ${TCOS_CHROOT}/etc/tcos/tcos.conf | sed 's/"//g')
  cat << EOC | chroot ${TCOS_CHROOT}
export LC_ALL=C
export LC_MESSAGES=C
[ ! -d /var/cache/tcos/packages/pulseaudio-esound-compat ] && gentcos -instpkg pulseaudio-esound-compat
[ ! -d /var/cache/tcos/packages/libesd0 ] && gentcos -instpkg libesd0
[ ! -d /var/cache/tcos/packages/esound ] && gentcos -instpkg esound
gentcos ${GENTCOS_OPT}
rm -f /var/lib/tcos/tftp/vmlinuz-${TCOS_KERNEL} /var/lib/tcos/tftp/usr-${TCOS_KERNEL}.squashfs
cp /boot/vmlinuz-${TCOS_KERNEL} /var/lib/tcos/files/usr-${TCOS_KERNEL}.squashfs /var/lib/tcos/tftp/
EOC
ln -s ${TCOS_CHROOT}/var/lib/tcos/tftp/vmlinuz-${TCOS_KERNEL} /var/lib/tcos/tftp/
ln -s ${TCOS_CHROOT}/var/lib/tcos/files/usr-${TCOS_KERNEL}.squashfs /var/lib/tcos/tftp/
ln -s ${TCOS_CHROOT}/var/lib/tcos/tftp/initramfs-${TCOS_KERNEL} /var/lib/tcos/tftp/

echo "## Generated file don't edit, edit /etc/tcos/pxelinux.cfg.tpl instead" > ${TFTP_DIR}/pxelinux.cfg/default
echo "## File generated by tcos-buildchroot on $(date)" >> ${TFTP_DIR}/pxelinux.cfg/default
sed -e "s/__TCOS_KERNEL__/${TCOS_KERNEL}/g"\
    -e "s/__DATE__/$(date)/g" ${TCOS_CONF}/pxelinux.cfg.tpl >> ${TFTP_DIR}/pxelinux.cfg/default
}


if [ "$#" = 0 ]; then
  echo "No parameters !!"
  usage
  exit 1
fi


OPTIONS=`getopt -o d:ko:r:v --long create,update,install:,update-images,help,version:,arch:,flavour:,dir:,mirror:,kversion:,gentcos:,debug,quiet,verbose -n "$0" -- "$@"`

if [ $? != 0 ] ; then echo "Terminating..." >&2 ; exit 1 ; fi
eval set -- "$OPTIONS"


while true; do
        case "$1" in
                --help) usage ; exit 0              ;;
                --version) TCOS_DISTRO=$2; shift 2 ;;
                --arch) TCOS_ARCH=$2 ; shift 2      ;;
                --flavour) TCOS_FLAVOUR=$2; shift 2 ;;
                --mirror) TCOS_MIRROR=$2; shift 2    ;;
                --dir) TCOS_CHROOT=$2 ; shift 2     ;;
                --kversion) TCOS_KERNEL=$2; shift 2   ;;
                --gentcos) GENTCOS_OPT=$2; shift 2   ;;
                --debug) echo "FIXME DEBUG"; shift  ;;
                --quiet) echo "FIXME QUIET"; shift  ;;
                --verbose) echo "FIXME VERBOSE";shift ;;

                --create) ACTION=create ; shift     ;;
                --update) ACTION=update ; shift     ;;
                --install) ACTION=installpkgs PKGS="$2"; shift 2;;
                --update-images) ACTION=update-images; shift;;

                --) shift ; break ;;
                *) usage; echo "Unknow option $1"; exit -1
                       ;;
        esac
done


if [ "$ACTION" != "" ]; then
  case $ACTION in
     update)
       chrootupdate; exit
       ;;
     create)
       chrootcreate; exit
       ;;
     installpkgs)
       tmp=$(echo $PKGS | sed 's/,/ /g')
       chrootinstallpkg $tmp ; exit
       ;;
     update-images)
       chrootupdateimages; exit
       ;;
     *)
       echo "Error, unknow action: $ACTION"
       exit 1
       ;;
  esac
fi


