#!/bin/bash
#/*
#* tcos-buildchrootThis script creates a chroot to build TCOS 32bits images
#*
#* Copyright (C) 2006,2007,2008  mariodebian at gmail
#*
#* This program is free software; you can redistribute it and/or
#* modify it under the terms of the GNU General Public License
#* as published by the Free Software Foundation; either version 2
#* of the License, or (at your option) any later version.
#*
#* This program is distributed in the hope that it will be useful,
#* but WITHOUT ANY WARRANTY; without even the implied warranty of
#* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#* GNU General Public License for more details.
#*
#* You should have received a copy of the GNU General Public License
#* along with this program; if not, write to the Free Software
#* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#*/


if [ $(id -u) != 0 ]; then
  echo "Error: need to exec as root user" >&2
  exit 1
fi

. /etc/tcos/tcos.conf
. /etc/tcos/version.conf
. ${TCOS_DIR}/tcos-generation-functions.sh

# default settings
TCOS_ARCH=i386
TCOS_FLAVOUR=standard
TCOS_MIRROR="http://www.tcosproject.org"


TCOS_PACKAGES="tcos-keyring initramfs-tools-tcos tcos-usplash tinylogin ltspfs-client lp-server xvnc4viewer esound"
TCOS_PACKAGES="${TCOS_PACKAGES} iftop strace twm x11vnc scrot cdparanoia dropbear aumix console-data discover"
TCOS_PACKAGES="${TCOS_PACKAGES} busybox rdesktop pulseaudio pulseaudio-module-x11 pulseaudio-utils"

# apt options (force-yes)
APT_OPTS="-y --force-yes"
ACTION=
GENTCOS_OPTS="-tftp"
MIRROR_EXTRAS=""

UBUNTU_DEF_MIRROR=http://archive.ubuntu.com/ubuntu/
UBUNTU_DEF_MIRROR2=http://security.ubuntu.com/ubuntu/
DEBIAN_DEF_MIRROR=http://ftp.de.debian.org/debian/


set_conf() {
    if [ "${DISTRIBUTION}" = "ubuntu" ]; then
      if [ ! $MIRROR ]; then MIRROR=$UBUNTU_DEF_MIRROR ; fi
      if [ ! $MIRROR2 ]; then MIRROR2=$UBUNTU_DEF_MIRROR2 ; fi
      MIRROR_EXTRAS="universe restricted multiverse"
      DISTRO_PACKAGES="xserver-xorg xutils libgl1-mesa-dri libgl1-mesa-glx libglu1-mesa mtools libnss-db xterm wget dosfstools"
      DISTRO_PACKAGES="${DISTRO_PACKAGES} debootstrap libltdl3 eject debconf grub syslinux alsa-utils squashfs-tools mknbi"
      DISTRO_PACKAGES="${DISTRO_PACKAGES} dhcp3-client python python-dbus alsa-base libkrb53 console-common console-data "
      DISTRO_PACKAGES="${DISTRO_PACKAGES} console-tools openbsd-inetd tcpd ssh"
      TCOS_PACKAGES="acpid ${TCOS_PACKAGES}"
      # need kernel modules unionfs and squashfs in linux-ubuntu-modules from distros grather than gutsy
      if [ ${TCOS_DISTRO} = "gutsy" -o ${TCOS_DISTRO} = "hardy" ];then
        TCOS_PACKAGES="linux-ubuntu-modules-${TCOS_KERNEL} ${TCOS_PACKAGES}"
      fi
    else
      if [ ! $MIRROR ]; then MIRROR=$DEBIAN_DEF_MIRROR ; fi
      DISTRO_PACKAGES="xserver-xorg xutils libgl1-mesa-dri libgl1-mesa-glx libglu1-mesa mtools libnss-db xterm wget dosfstools "
      DISTRO_PACKAGES="${DISTRO_PACKAGES} debootstrap libltdl3 eject debconf grub syslinux alsa-utils squashfs-tools mknbi "
      DISTRO_PACKAGES="${DISTRO_PACKAGES} dhcp3-client python python-dbus alsa-base libkrb53 acpid console-tools"
    fi
}

# load forced settings for derivatives
if [ -d /etc/tcos/conf.d/ ]; then
  for file in /etc/tcos/conf.d/tcos*conf; do
    [ -e $file ] && . $file
  done
fi

usage() {
  cat << EOF
tcos-buildchroot usage:

     Actions:
        --create                     (Create chroot)
        --update                     (Update chroot)
        --install=package1,package2  (Install some packages in chroot)
        --update-images              (Update chroot TCOS images)

     Options:
        --arch=xxx           (Set Architecture of chroot, default: $TCOS_ARCH)
        --flavour=xxx        (Set flavour of chroot, default: $TCOS_FLAVOUR)  
        --version=xxx        (Set version of chroot, default: $TCOS_DISTRO)
        --forcedistro=xxx    (Set distro of chroot, default: $DISTRIBUTION)
        --dir=xxx            (Set dir of chroot, default: $TCOS_CHROOT)
EOF
if [ "$DISTRIBUTION" = "ubuntu" ]; then
cat << EOF
        --mirror=xxx         (Set mirror of chroot, default: $UBUNTU_DEF_MIRROR)
        --securitymirror=xxx (Set security mirror of chroot, default: $UBUNTU_DEF_MIRROR2)
EOF
else
cat << EOF
        --mirror=xxx         (Set mirror of chroot, default: $DEBIAN_DEF_MIRROR)
EOF
fi
cat << EOF
        --tcosmirror=xxx     (Set mirror of TCOS, default: $TCOS_MIRROR)
        --kversion=xxx       (Set kernel version of chroot, default: $TCOS_KERNEL)
        --gentcos="xxx"      (Set gentcos cmdline options)

EOF
}

chrootcreate() {
  TMP=""
  TMP2=""
  for pkg in $DISTRO_PACKAGES ; do
    TMP="$TMP,$pkg"
    TMP2="$TMP2 $pkg"
  done
  mkdir -p ${TCOS_CHROOT}
 
  if [ "${DISTRIBUTION}" = "ubuntu" ]; then
    debootstrap --arch "${TCOS_ARCH}" ${TCOS_DISTRO} ${TCOS_CHROOT} ${MIRROR}
  else
    cdebootstrap --arch="${TCOS_ARCH}" --flavour="${TCOS_FLAVOUR}" --include=${TMP} \
        ${TCOS_DISTRO} ${TCOS_CHROOT} ${MIRROR}
  fi

  if [ $? != 0 ]; then echo "Error running debootstrap." ; exit $?; fi

  # Add TCOS mirror
  echo "deb ${TCOS_MIRROR} $TCOS_DISTRO main" >> ${TCOS_CHROOT}/etc/apt/sources.list

  # add extras (universe and multiverse repos)
  if [ "${MIRROR_EXTRAS}" != "" ]; then
    echo "deb ${MIRROR} ${TCOS_DISTRO} ${MIRROR_EXTRAS}" >> ${TCOS_CHROOT}/etc/apt/sources.list
    echo "deb ${MIRROR2} ${TCOS_DISTRO}-security main ${MIRROR_EXTRAS}" >> ${TCOS_CHROOT}/etc/apt/sources.list
    echo "deb ${MIRROR} ${TCOS_DISTRO}-updates main ${MIRROR_EXTRAS}" >> ${TCOS_CHROOT}/etc/apt/sources.list
  fi
  
  # add extra source include in forced settings
  if [ ! -z ${MIRROR_EXTRA} ];then
    echo ${MIRROR_EXTRA} >> ${TCOS_CHROOT}/etc/apt/sources.list
  fi

  # add /etc/resolv.conf (some versions of cdebootstrap don't create it)
  cat /etc/resolv.conf > ${TCOS_CHROOT}/etc/resolv.conf

  # avoid to use a shell script in chroot
  if [ "$(file ${TCOS_CHROOT}/sbin/start-stop-daemon | grep -c ELF)" = "1" ]; then
        cp ${TCOS_CHROOT}/sbin/start-stop-daemon ${TCOS_CHROOT}/sbin/start-stop-daemon.original
  fi
  if [ "$(file ${TCOS_CHROOT}/sbin/start-stop-daemon.REAL | grep -c ELF)" = "1" ]; then
        cp ${TCOS_CHROOT}/sbin/start-stop-daemon.REAL ${TCOS_CHROOT}/sbin/start-stop-daemon.original
  fi


mount --bind /proc ${TCOS_CHROOT}/proc
mount --bind /sys ${TCOS_CHROOT}/sys

# pressed linux-image message
cat << EOF > ${TCOS_CHROOT}/pressed
linux-image-${TCOS_KERNEL}	linux-image-${TCOS_KERNEL}/preinst/lilo-initrd-${TCOS_KERNEL}	boolean	false
EOF

cat << CMD > ${TCOS_CHROOT}/sbin/start-stop-daemon
#!/bin/sh
exit 0
CMD
cat << CMD > ${TCOS_CHROOT}/usr/sbin/invoke-rc.d
#!/bin/sh
exit 0
CMD
chmod +x ${TCOS_CHROOT}/sbin/start-stop-daemon ${TCOS_CHROOT}/usr/sbin/invoke-rc.d

cat << EOC | chroot ${TCOS_CHROOT}
export LC_ALL=C
export LC_MESSAGES=C
export DEBCONF_FRONTEND="noninteractive"
export DEBIAN_FRONTEND="noninteractive"
apt-get $APT_OPTS update
apt-get install $APT_OPTS tcos-keyring
apt-get $APT_OPTS update
apt-get install $APT_OPTS ${TMP2} 
apt-get clean
debconf-set-selections /pressed
rm -f /pressed
apt-get $APT_OPTS upgrade
EOC



if [ "${DISTRIBUTION}" = "ubuntu" ]; then

cat << EOC | chroot ${TCOS_CHROOT}
export LC_ALL=C
export LC_MESSAGES=C
export DEBCONF_FRONTEND="noninteractive"
export DEBIAN_FRONTEND="noninteractive"

apt-get install $APT_OPTS linux-image-${TCOS_KERNEL} linux-restricted-modules-${TCOS_KERNEL} ${TCOS_PACKAGES} tcos-extra-modules-${TCOS_KERNEL}
apt-get clean
/etc/init.d/dropbear stop || true
EOC
# need umount this directory to allow remove later chroot from distros grather than gutsy
[ ${TCOS_DISTRO} = "gutsy" -o ${TCOS_DISTRO} = "hardy" ] && umount ${TCOS_CHROOT}/lib/modules/${TCOS_KERNEL}/volatile/
  
######################################
else # DISTRO != ubuntu
cat << EOC | chroot ${TCOS_CHROOT}
export LC_ALL=C
export LC_MESSAGES=C
export DEBCONF_FRONTEND="noninteractive"
export DEBIAN_FRONTEND="noninteractive"
apt-get install $APT_OPTS linux-image-${TCOS_KERNEL} tcos-extra-modules-${TCOS_KERNEL} ${TCOS_PACKAGES}
apt-get clean
/etc/init.d/dropbear stop || true
rm -f /pressed
EOC
fi
touch ${TCOS_CHROOT}/etc/tcos/chroot
umount -l ${TCOS_CHROOT}/proc
umount -l ${TCOS_CHROOT}/sys
}



chrootupdate() {
  cat /etc/resolv.conf > ${TCOS_CHROOT}/etc/resolv.conf
  cat << EOC | chroot ${TCOS_CHROOT}
export LC_ALL=C
export LC_MESSAGES=C
export DEBCONF_FRONTEND="dialog"
export DEBIAN_FRONTEND="dialog"
[ ! -e /sbin/start-stop-daemon ] && cat << CMD > /sbin/start-stop-daemon
#!/bin/sh
CMD
[ ! -e /usr/sbin/invoke-rc.d ] && cat << CMD > /usr/sbin/invoke-rc.d
#!/bin/sh
CMD
chmod +x /sbin/start-stop-daemon /usr/sbin/invoke-rc.d
apt-get update
if [ "${DISTRIBUTION}" = "ubuntu" ]; then
    apt-get $APT_OPTS dist-upgrade
    apt-get install $APT_OPTS ${TMP2} ${TCOS_PACKAGES}
    # need umount this directory to allow remove later chroot from distros grather than gutsy
    [ ${TCOS_DISTRO} = "gutsy" -o ${TCOS_DISTRO} = "hardy" ] && umount ${TCOS_CHROOT}/lib/modules/${TCOS_KERNEL}/volatile/
else
    apt-get install $APT_OPTS cdebootstrap
    dpkg -i /usr/share/cdebootstrap/cdebootstrap-helper-diverts.deb
    apt-get $APT_OPTS dist-upgrade
    apt-get install $APT_OPTS ${TMP2} ${TCOS_PACKAGES}
    dpkg --remove cdebootstrap-helper-diverts
fi
apt-get clean
EOC
touch ${TCOS_CHROOT}/etc/tcos/chroot
}

chrootinstallpkg() {
  cat /etc/resolv.conf > ${TCOS_CHROOT}/etc/resolv.conf
  cat << EOC | chroot ${TCOS_CHROOT}
export LC_ALL=C
export LC_MESSAGES=C
export DEBCONF_FRONTEND="noninteractive"
export DEBIAN_FRONTEND="noninteractive"
[ ! -e /sbin/start-stop-daemon ] && cat << CMD > /sbin/start-stop-daemon
#!/bin/sh
CMD
[ ! -e /usr/sbin/invoke-rc.d ] && cat << CMD > /usr/sbin/invoke-rc.d
#!/bin/sh
CMD
chmod +x /sbin/start-stop-daemon /usr/sbin/invoke-rc.d
apt-get update

if [ "${DISTRIBUTION}" = "ubuntu" ]; then
    apt-get $APT_OPTS install $@
else
    apt-get install $APT_OPTS cdebootstrap
    dpkg -i /usr/share/cdebootstrap/cdebootstrap-helper-diverts.deb
    apt-get $APT_OPTS install $@
    dpkg --remove cdebootstrap-helper-diverts
fi
apt-get clean
EOC
}

chrootupdateimages() {
cat /etc/resolv.conf > ${TCOS_CHROOT}/etc/resolv.conf
TCOS_KERNEL=$(awk -F"=" '/^TCOS_KERNEL=/ {print $2}' ${TCOS_CHROOT}/etc/tcos/tcos.conf | sed 's/"//g')
  cat << EOC | chroot ${TCOS_CHROOT}
export LC_ALL=C
export LC_MESSAGES=C
[ ! -d /var/cache/tcos/packages/pulseaudio-esound-compat ] && gentcos -instpkg pulseaudio-esound-compat
[ ! -d /var/cache/tcos/packages/libesd0 ] && gentcos -instpkg libesd0
[ ! -d /var/cache/tcos/packages/esound ] && gentcos -instpkg esound

# need for Tcos but conflicts with discover1 required by Lliurex
if [ "${DISTRIBUTION}" = "ubuntu" ]; then
    [ ! -d /var/cache/tcos/packages/discover ] && gentcos -instpkg discover discover-data libdiscover2
fi

gentcos ${GENTCOS_OPT}
EOC
# this is exec outside chroot
rm -rf /var/lib/tcos/tftp/vmlinuz-${TCOS_KERNEL} \
       /var/lib/tcos/tftp/usr-${TCOS_KERNEL}.squashfs \
       /var/lib/tcos/tftp/initramfs-${TCOS_KERNEL} \
       /var/lib/tcos/tftp/linux-${TCOS_KERNEL}.nbi \
       /var/lib/tcos/fs-${TCOS_KERNEL}

[ ! -e /var/lib/tcos/tftp/vmlinuz-${TCOS_KERNEL} ] && \
	ln -s ${TCOS_CHROOT}/boot/vmlinuz-${TCOS_KERNEL} /var/lib/tcos/tftp/

[ ! -e /var/lib/tcos/tftp/usr-${TCOS_KERNEL}.squashfs ] && \
	ln -s ${TCOS_CHROOT}/var/lib/tcos/tftp/usr-${TCOS_KERNEL}.squashfs /var/lib/tcos/tftp/

[ ! -e /var/lib/tcos/tftp/initramfs-${TCOS_KERNEL} ] && \
	[ -e ${TCOS_CHROOT}/var/lib/tcos/tftp/initramfs-${TCOS_KERNEL} ] && \
	ln -s ${TCOS_CHROOT}/var/lib/tcos/tftp/initramfs-${TCOS_KERNEL} /var/lib/tcos/tftp/

[ ! -e /var/lib/tcos/tftp/linux-${TCOS_KERNEL}.nbi ] && \
	[ -e ${TCOS_CHROOT}/var/lib/tcos/tftp/linux-${TCOS_KERNEL}.nbi ] && \
	ln -s ${TCOS_CHROOT}/var/lib/tcos/tftp/linux-${TCOS_KERNEL}.nbi /var/lib/tcos/tftp/

# NFS files and dirs
[ ! -e /var/lib/tcos/tftp/initramfs-${TCOS_KERNEL}-nfs ] && \
	[ -e ${TCOS_CHROOT}/var/lib/tcos/tftp/initramfs-${TCOS_KERNEL}-nfs ] && \
	ln -s ${TCOS_CHROOT}/var/lib/tcos/tftp/initramfs-${TCOS_KERNEL}-nfs /var/lib/tcos/tftp/

[ ! -d /var/lib/tcos/fs-${TCOS_KERNEL} ] && \
	[ -d ${TCOS_CHROOT}/var/lib/tcos/fs-${TCOS_KERNEL} ] && \
	ln -s ${TCOS_CHROOT}/var/lib/tcos/fs-${TCOS_KERNEL} /var/lib/tcos/

# generate pxelinux.cfg/default
parse_pxelinuxcfg
}


if [ "$#" = 0 ]; then
  echo "No parameters !!"
  usage
  exit 1
fi


OPTIONS=`getopt -o d:ko:r:v --long create,update,install:,update-images,help,version:,forcedistro:,arch:,flavour:,dir:,mirror:,securitymirror:,tcosmirror:,kversion:,gentcos:,debug,quiet,verbose -n "$0" -- "$@"`

if [ $? != 0 ] ; then echo "Terminating..." >&2 ; exit 1 ; fi
eval set -- "$OPTIONS"


while true; do
        case "$1" in
                --help) usage ; exit 0              ;;
                --version) TCOS_DISTRO=$2; shift 2 ;;
                --forcedistro) DISTRIBUTION=$2; shift 2;;
                --arch) TCOS_ARCH=$2 ; shift 2      ;;
                --flavour) TCOS_FLAVOUR=$2; shift 2 ;;
                --mirror) MIRROR=$2; shift 2    ;;
                --securitymirror) MIRROR2=$2; shift 2;;
                --tcosmirror) TCOS_MIRROR=$2; shift 2    ;;
                --dir) TCOS_CHROOT=$2 ; shift 2     ;;
                --kversion) TCOS_KERNEL=$2; shift 2   ;;
                --gentcos) GENTCOS_OPT=$2; shift 2   ;;
                --debug) echo "FIXME DEBUG"; shift  ;;
                --quiet) echo "FIXME QUIET"; shift  ;;
                --verbose) echo "FIXME VERBOSE";shift ;;

                --create) ACTION=create ; shift     ;;
                --update) ACTION=update ; shift     ;;
                --install) ACTION=installpkgs PKGS="$2"; shift 2;;
                --update-images) ACTION=update-images; shift;;

                --) shift ; break ;;
                *) usage; echo "Unknow option $1"; exit -1
                       ;;
        esac
done

# load conf with forces settings
set_conf

# save data in tcos-buildchroot.conf or load if chroot exists
if [ ! -f ${TCOS_CHROOT}/tcos-buildchroot.conf ]; then
    mkdir -p ${TCOS_CHROOT}
    echo "DISTRIBUTION=$DISTRIBUTION" >  ${TCOS_CHROOT}/tcos-buildchroot.conf
    echo "MIRROR=$MIRROR"             >> ${TCOS_CHROOT}/tcos-buildchroot.conf
    echo "MIRROR2=$MIRROR2"           >> ${TCOS_CHROOT}/tcos-buildchroot.conf
    echo "TCOS_MIRROR=$TCOS_MIRROR"   >> ${TCOS_CHROOT}/tcos-buildchroot.conf
    echo "TCOS_KERNEL=$TCOS_KERNEL"   >> ${TCOS_CHROOT}/tcos-buildchroot.conf
    echo "TCOS_DISTRO=$TCOS_DISTRO"   >> ${TCOS_CHROOT}/tcos-buildchroot.conf
else
    . ${TCOS_CHROOT}/tcos-buildchroot.conf
fi

if [ "$ACTION" != "" ]; then
  case $ACTION in
     update)
       chrootupdate; exit
       ;;
     create)
       chrootcreate; exit
       ;;
     installpkgs)
       tmp=$(echo $PKGS | sed 's/,/ /g')
       chrootinstallpkg $tmp ; exit
       ;;
     update-images)
       chrootupdateimages; exit
       ;;
     *)
       echo "Error, unknow action: $ACTION"
       exit 1
       ;;
  esac
fi


