#!/bin/bash
#
#  This script creates a chroot to build TCOS 32bits images
#
#


if [ $(id -u) != 0 ]; then
  echo "Error: need to exec as root user" >&2
  exit 1
fi

. /etc/tcos/tcos.conf
. /etc/tcos/version.conf

# default settings
TCOS_ARCH=i386
TCOS_FLAVOUR=standard

TCOS_PACKAGES="tcos-keyring initramfs-tools-tcos tcos-usplash tinylogin ltspfs-client lp-server xvnc4viewer esound rdesktop"
TCOS_PACKAGES="${TCOS_PACKAGES} iftop strace twm x11vnc scrot cdparanoia dropbear aumix console-data discover busybox pulseaudio pulseaudio-module-x11 pulseaudio-utils"

# apt options (force-yes)
APT_OPTS="-y --force-yes"


if [ "${DISTRIBUTION}" = "ubuntu" ]; then
  TCOS_MIRROR=http://archive.ubuntu.com/ubuntu/
  TCOS_MIRROR2=http://security.ubuntu.com/ubuntu/
  MIRROR_EXTRAS="universe restricted multiverse"
  DISTRO_PACKAGES="xserver-xorg xutils libgl1-mesa-dri libgl1-mesa-glx libglu1-mesa mtools libnss-db xterm wget dosfstools debootstrap libltdl3 eject debconf grub syslinux alsa-utils squashfs-tools mknbi dhcp3-client python python-dbus alsa-base libkrb53 console-common console-data console-tools openbsd-inetd tcpd"
  TCOS_PACKAGES="acpid ${TCOS_PACKAGES}"
else
  TCOS_MIRROR=http://ftp.de.debian.org/debian
  MIRROR_EXTRAS=""
  DISTRO_PACKAGES="xserver-xorg xutils libgl1-mesa-dri libgl1-mesa-glx libglu1-mesa mtools libnss-db xterm wget dosfstools debootstrap libltdl3 eject debconf grub syslinux alsa-utils squashfs-tools mknbi dhcp3-client python python-dbus alsa-base libkrb53 acpid console-tools"
fi
ACTION=
GENTCOS_OPTS="-tftp"

# load forced settings for derivatives
if [ -d /etc/tcos/conf.d/ ]; then
  for file in /etc/tcos/conf.d/tcos*conf; do
    [ -e $file ] && . $file
  done
fi

usage() {
  cat << EOF
tcos-buildchroot usage:

     Actions:
           --create                     (Create chroot)
           --update                     (Update chroot)
           --install=package1,package2  (Install some packages in chroot)
           --update-images              (Update chroot TCOS images)

     Options:
           --arch=xxx      (Set Architecture of chroot, default: $TCOS_ARCH)
           --flavour=xxx   (Set flavour of chroot, default: $TCOS_FLAVOUR)  
           --version=xxx   (Set version of chroot, default: $TCOS_DISTRO)
           --dir=xxx       (Set dir of chroot, default: $TCOS_CHROOT)
           --mirror=xxx    (Set mirror of chroot, default: $TCOS_MIRROR)
           --kversion=xxx  (Set kernel version of chroot, default: $TCOS_KERNEL)
           --gentcos="xxx" (Set gentcos cmdline options)

EOF
}

chrootcreate() {
  TMP=""
  TMP2=""
  for pkg in $DISTRO_PACKAGES ; do
    TMP="$TMP,$pkg"
    TMP2="$TMP2 $pkg"
  done
  mkdir -p ${TCOS_CHROOT}
  echo "Using mirror: ${TCOS_MIRROR}"
 
  if [ "${DISTRIBUTION}" = "ubuntu" ]; then
    debootstrap --arch "${TCOS_ARCH}" ${TCOS_DISTRO} ${TCOS_CHROOT} ${TCOS_MIRROR}
  else
    cdebootstrap --arch="${TCOS_ARCH}" --flavour="${TCOS_FLAVOUR}" --include=${TMP} \
        ${TCOS_DISTRO} ${TCOS_CHROOT} ${TCOS_MIRROR}
  fi

  if [ $? != 0 ]; then echo "Error running debootstrap." ; exit $?; fi

  # Add TCOS mirror
  echo "deb http://www.tcosproject.org $TCOS_DISTRO main" >> ${TCOS_CHROOT}/etc/apt/sources.list

  # add extras (universe and multiverse repos)
  if [ "${MIRROR_EXTRAS}" != "" ]; then
    echo "deb ${TCOS_MIRROR} ${TCOS_DISTRO} ${MIRROR_EXTRAS}" >> ${TCOS_CHROOT}/etc/apt/sources.list
    echo "deb ${TCOS_MIRROR2} ${TCOS_DISTRO}-security main ${MIRROR_EXTRAS}" >> ${TCOS_CHROOT}/etc/apt/sources.list
    echo "deb ${TCOS_MIRROR} ${TCOS_DISTRO}-updates main ${MIRROR_EXTRAS}" >> ${TCOS_CHROOT}/etc/apt/sources.list
  fi

  # add /etc/resolv.conf (some versions of cdebootstrap don't create it)
  cat /etc/resolv.conf > ${TCOS_CHROOT}/etc/resolv.conf



if [ "${DISTRIBUTION}" = "ubuntu" ]; then
  mount --bind /proc ${TCOS_CHROOT}/proc
  mount --bind /sys ${TCOS_CHROOT}/sys
  cat << EOC | chroot ${TCOS_CHROOT}
export LC_ALL=C
export LC_MESSAGES=C
export DEBCONF_FRONTEND="noninteractive"
apt-get $APT_OPTS update
DEBIAN_FRONTEND="noninteractive" apt-get install $APT_OPTS tcos-keyring
apt-get $APT_OPTS update
DEBIAN_FRONTEND="noninteractive" apt-get install $APT_OPTS ${TMP2} 
apt-get clean
EOC
  umount ${TCOS_CHROOT}/proc
  umount ${TCOS_CHROOT}/sys
  cat << EOF > ${TCOS_CHROOT}/pressed
linux-image-${TCOS_KERNEL}	linux-image-${TCOS_KERNEL}/preinst/lilo-initrd-${TCOS_KERNEL}	boolean	false
EOF
  cat << EOC | chroot ${TCOS_CHROOT}
export LC_ALL=C
export LC_MESSAGES=C
export DEBCONF_FRONTEND="noninteractive"
apt-get update
debconf-set-selections /pressed
DEBIAN_FRONTEND="noninteractive" apt-get install $APT_OPTS ${TCOS_PACKAGES} linux-image-${TCOS_KERNEL} tcos-extra-modules-${TCOS_KERNEL}
DEBIAN_FRONTEND="noninteractive" apt-get $APT_OPTS upgrade
apt-get clean
/etc/init.d/dropbear stop
rm -f /pressed
EOC
else # DISTRO != ubuntu
  cat << EOF > ${TCOS_CHROOT}/pressed
linux-image-${TCOS_KERNEL}	linux-image-${TCOS_KERNEL}/preinst/lilo-initrd-${TCOS_KERNEL}	boolean	false
EOF
  cat << EOC | chroot ${TCOS_CHROOT}
export LC_ALL=C
export LC_MESSAGES=C
export DEBCONF_FRONTEND="noninteractive"
apt-get update
DEBIAN_FRONTEND="noninteractive" apt-get install $APT_OPTS tcos-keyring
apt-get $APT_OPTS update
debconf-set-selections /pressed
DEBIAN_FRONTEND="noninteractive" apt-get install $APT_OPTS ${TMP2} ${TCOS_PACKAGES} linux-image-${TCOS_KERNEL} tcos-extra-modules-${TCOS_KERNEL}
DEBIAN_FRONTEND="noninteractive" apt-get $APT_OPTS upgrade
apt-get clean
/etc/init.d/dropbear stop
rm -f /pressed
EOC
fi
}



chrootupdate() {
  cat /etc/resolv.conf > ${TCOS_CHROOT}/etc/resolv.conf
  cat << EOC | chroot ${TCOS_CHROOT}
export LC_ALL=C
export LC_MESSAGES=C
export DEBCONF_FRONTEND="noninteractive"

[ ! -e /sbin/start-stop-daemon ] && cat << CMD > /sbin/start-stop-daemon
#!/bin/sh
CMD
[ ! -e /usr/sbin/invoke-rc.d ] && cat << CMD > /usr/sbin/invoke-rc.d
#!/bin/sh
CMD
chmod +x /sbin/start-stop-daemon /usr/sbin/invoke-rc.d
apt-get update
if [ "${DISTRIBUTION}" = "ubuntu" ]; then
    DEBIAN_FRONTEND="noninteractive" apt-get $APT_OPTS upgrade
    DEBIAN_FRONTEND="noninteractive" apt-get install $APT_OPTS ${TMP2} ${TCOS_PACKAGES}
else
    DEBIAN_FRONTEND="noninteractive" apt-get install $APT_OPTS cdebootstrap
    dpkg -i /usr/share/cdebootstrap/cdebootstrap-helper-diverts.deb
    DEBIAN_FRONTEND="noninteractive" apt-get $APT_OPTS upgrade
    DEBIAN_FRONTEND="noninteractive" apt-get install $APT_OPTS ${TMP2} ${TCOS_PACKAGES}
    dpkg --remove cdebootstrap-helper-diverts
fi
apt-get clean
EOC
}

chrootinstallpkg() {
  cat /etc/resolv.conf > ${TCOS_CHROOT}/etc/resolv.conf
  cat << EOC | chroot ${TCOS_CHROOT}
export LC_ALL=C
export LC_MESSAGES=C
export DEBCONF_FRONTEND="noninteractive"
[ ! -e /sbin/start-stop-daemon ] && cat << CMD > /sbin/start-stop-daemon
#!/bin/sh
CMD
[ ! -e /usr/sbin/invoke-rc.d ] && cat << CMD > /usr/sbin/invoke-rc.d
#!/bin/sh
CMD
chmod +x /sbin/start-stop-daemon /usr/sbin/invoke-rc.d
apt-get update

if [ "${DISTRIBUTION}" = "ubuntu" ]; then
    DEBIAN_FRONTEND="noninteractive"  apt-get $APT_OPTS install $@
else
    DEBIAN_FRONTEND="noninteractive" apt-get install $APT_OPTS cdebootstrap
    dpkg -i /usr/share/cdebootstrap/cdebootstrap-helper-diverts.deb
    DEBIAN_FRONTEND="noninteractive" apt-get $APT_OPTS install $@
    dpkg --remove cdebootstrap-helper-diverts
fi
apt-get clean
EOC
}

chrootupdateimages() {
cat /etc/resolv.conf > ${TCOS_CHROOT}/etc/resolv.conf
TCOS_KERNEL=$(awk -F"=" '/^TCOS_KERNEL=/ {print $2}' ${TCOS_CHROOT}/etc/tcos/tcos.conf | sed 's/"//g')
  cat << EOC | chroot ${TCOS_CHROOT}
export LC_ALL=C
export LC_MESSAGES=C
[ ! -d /var/cache/tcos/packages/pulseaudio-esound-compat ] && gentcos -instpkg pulseaudio-esound-compat
[ ! -d /var/cache/tcos/packages/libesd0 ] && gentcos -instpkg libesd0
[ ! -d /var/cache/tcos/packages/esound ] && gentcos -instpkg esound

# need for Tcos but conflicts with discover1 required by Lliurex
if [ "${DISTRIBUTION}" = "ubuntu" ]; then
    [ ! -d /var/cache/tcos/packages/discover ] && gentcos -instpkg discover discover-data libdiscover2
fi

gentcos ${GENTCOS_OPT}
EOC
rm -f /var/lib/tcos/tftp/vmlinuz-${TCOS_KERNEL} /var/lib/tcos/tftp/usr-${TCOS_KERNEL}.squashfs

[ ! -e /var/lib/tcos/tftp/vmlinuz-${TCOS_KERNEL} ] && \
	ln -s ${TCOS_CHROOT}/boot/vmlinuz-${TCOS_KERNEL} /var/lib/tcos/tftp/

[ ! -e /var/lib/tcos/tftp/usr-${TCOS_KERNEL}.squashfs ] && \
	ln -s ${TCOS_CHROOT}/var/lib/tcos/tftp/usr-${TCOS_KERNEL}.squashfs /var/lib/tcos/tftp/

[ ! -e /var/lib/tcos/tftp/initramfs-${TCOS_KERNEL} ] && \
	[ -e ${TCOS_CHROOT}/var/lib/tcos/tftp/initramfs-${TCOS_KERNEL} ] && \
	ln -s ${TCOS_CHROOT}/var/lib/tcos/tftp/initramfs-${TCOS_KERNEL} /var/lib/tcos/tftp/

[ ! -e /var/lib/tcos/tftp/linux-${TCOS_KERNEL}.nbi ] && \
	[ -e ${TCOS_CHROOT}/var/lib/tcos/tftp/linux-${TCOS_KERNEL}.nbi ] && \
	ln -s ${TCOS_CHROOT}/var/lib/tcos/tftp/linux-${TCOS_KERNEL}.nbi /var/lib/tcos/tftp/

# NFS files and dirs
[ ! -e /var/lib/tcos/tftp/initramfs-${TCOS_KERNEL}-nfs ] && \
	[ -e ${TCOS_CHROOT}/var/lib/tcos/tftp/initramfs-${TCOS_KERNEL}-nfs ] && \
	ln -s ${TCOS_CHROOT}/var/lib/tcos/tftp/initramfs-${TCOS_KERNEL}-nfs /var/lib/tcos/tftp/

[ ! -d /var/lib/tcos/fs-${TCOS_KERNEL} ] && \
	[ -d ${TCOS_CHROOT}/var/lib/tcos/fs-${TCOS_KERNEL} ] && \
	ln -s ${TCOS_CHROOT}/var/lib/tcos/fs-${TCOS_KERNEL} /var/lib/tcos/


echo "## Generated file don't edit, edit /etc/tcos/pxelinux.cfg.tpl instead" > ${TFTP_DIR}/pxelinux.cfg/default
echo "## File generated by tcos-buildchroot on $(date)" >> ${TFTP_DIR}/pxelinux.cfg/default
sed -e "s/__TCOS_KERNEL__/${TCOS_KERNEL}/g"\
    -e "s/__DATE__/$(date)/g" ${TCOS_CONF}/pxelinux.cfg.tpl >> ${TFTP_DIR}/pxelinux.cfg/default
}


if [ "$#" = 0 ]; then
  echo "No parameters !!"
  usage
  exit 1
fi


OPTIONS=`getopt -o d:ko:r:v --long create,update,install:,update-images,help,version:,arch:,flavour:,dir:,mirror:,kversion:,gentcos:,debug,quiet,verbose -n "$0" -- "$@"`

if [ $? != 0 ] ; then echo "Terminating..." >&2 ; exit 1 ; fi
eval set -- "$OPTIONS"


while true; do
        case "$1" in
                --help) usage ; exit 0              ;;
                --version) TCOS_DISTRO=$2; shift 2 ;;
                --arch) TCOS_ARCH=$2 ; shift 2      ;;
                --flavour) TCOS_FLAVOUR=$2; shift 2 ;;
                --mirror) TCOS_MIRROR=$2; shift 2    ;;
                --dir) TCOS_CHROOT=$2 ; shift 2     ;;
                --kversion) TCOS_KERNEL=$2; shift 2   ;;
                --gentcos) GENTCOS_OPT=$2; shift 2   ;;
                --debug) echo "FIXME DEBUG"; shift  ;;
                --quiet) echo "FIXME QUIET"; shift  ;;
                --verbose) echo "FIXME VERBOSE";shift ;;

                --create) ACTION=create ; shift     ;;
                --update) ACTION=update ; shift     ;;
                --install) ACTION=installpkgs PKGS="$2"; shift 2;;
                --update-images) ACTION=update-images; shift;;

                --) shift ; break ;;
                *) usage; echo "Unknow option $1"; exit -1
                       ;;
        esac
done


if [ "$ACTION" != "" ]; then
  case $ACTION in
     update)
       chrootupdate; exit
       ;;
     create)
       chrootcreate; exit
       ;;
     installpkgs)
       tmp=$(echo $PKGS | sed 's/,/ /g')
       chrootinstallpkg $tmp ; exit
       ;;
     update-images)
       chrootupdateimages; exit
       ;;
     *)
       echo "Error, unknow action: $ACTION"
       exit 1
       ;;
  esac
fi


