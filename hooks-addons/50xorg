# hooks addon of Xorg
# compatible with Xorg 6.9 and 7.0


if [ $TCOS_XORG ] ; then
# Xorg stuff
 stat_before
if [ "$(pathof Xorg)" = /usr/bin/Xorg ]; then
   XORG=7
   _echo "   USING Xorg 7.X dirs"
   XORG_PATH=/usr/bin
else
   XORG=6
   _echo "   USING Xorg 6.9 dirs"
   XORG_PATH=/usr/X11R6/bin
fi


cpifexists $CONFDIR/tcos-modules.conf         /conf/

cpifexists $XORG_PATH/Xorg    /usr/bin
cpifexists $XORG_PATH/xauth   /usr/bin
cpifexists $XORG_PATH/mcookie /usr/bin
cpifexists $XORG_PATH/xhost   /usr/bin
cpifexists $XORG_PATH/xterm   /usr/bin
cpifexists $XORG_PATH/twm     /usr/bin
#cpifexists $XORG_PATH/xfs    /usr/bin

# some xutils
cpifexists $XORG_PATH/xset     /usr/bin
cpifexists $XORG_PATH/xsetroot /usr/bin
cpifexists $XORG_PATH/sessreg  /usr/bin
cpifexists $XORG_PATH/xkbcomp  /usr/bin/


mkdir -p $DESTDIR/var/log


mkdir -p $DESTDIR/etc/X11/xserver

# no anymore in Xorg 7.0 ??
#copydir /etc/X11/xserver/      /etc/X11/

################ ugly hack###########################
mkdir -p $DESTDIR/etc/X11/xserver/
cp ${TCOS_CONF}/SecurityPolicy $DESTDIR/etc/X11/xserver/
#####################################################


# copy xorg.conf template and generator
cp ${TCOS_CONF}/xorg.conf.tpl ${DESTDIR}/conf/xorg.conf.tpl
install -m 755 ${TCOS_BINS}/configurexorg ${DESTDIR}/sbin/configurexorg
install -m 755 ${TCOS_BINS}/tryXorg.sh    ${DESTDIR}/sbin/tryXorg



# FONTS modules
if [ $XORG = 6 ]; then
 mkdir -p  $DESTDIR/usr/X11R6/lib/modules/
 copydir /usr/X11R6/lib/modules/fonts /usr/X11R6/lib/modules/
else
 mkdir -p  $DESTDIR/usr/lib/xorg/modules/
 copydir /usr/lib/xorg/modules/fonts /usr/lib/xorg/modules/
fi


# PCIIDS
if [ $XORG = 7 ] && [ -d /usr/share/xserver/xorg/pci ] ; then
 mkdir -p $DESTDIR/usr/share/xserver-xorg/
 copydir /usr/share/xserver/xorg/pci $DESTDIR/usr/share/xserver-xorg/
fi


# FIXME need light initramfs not fonts....
#if [ $XORG = 6 ]; then
# mkdir -p $DESTDIR/usr/X11R6/lib/X11/fonts
# cp -ra /usr/X11R6/lib/X11/fonts/encodings $DESTDIR/usr/X11R6/lib/X11/fonts/
# cp -ra /usr/X11R6/lib/X11/fonts/misc $DESTDIR/usr/X11R6/lib/X11/fonts/
#else
# mkdir -p $DESTDIR/usr/share/fonts/X11
# cp -ra /usr/share/fonts/X11/encodings $DESTDIR/usr/share/fonts/X11
# cp -ra /usr/share/fonts/X11/misc $DESTDIR/usr/share/fonts/X11/misc
#fi


# FIXME clean ja or ko fonts
#rm -rf $DESTDIR/usr/X11R6/lib/X11/fonts/misc/*ja*



# MODULES
if [ $XORG = 6 ]; then
 mkdir -p $DESTDIR/usr/X11R6/lib/modules/input/
 cp -ra /usr/X11R6/lib/modules/lib*so $DESTDIR/usr/X11R6/lib/modules/
 cp -ra /usr/X11R6/lib/modules/input/* $DESTDIR/usr/X11R6/lib/modules/input/
 mkdir -p  $DESTDIR/usr/X11R6/lib/modules/linux
 cp -ra /usr/X11R6/lib/modules/linux/lib*so $DESTDIR/usr/X11R6/lib/modules/linux/
else
 mkdir -p $DESTDIR/usr/lib/xorg/modules/input/
 cp -ra /usr/lib/xorg/modules/lib*so $DESTDIR/usr/lib/xorg/modules/
 cp -ra /usr/lib/xorg/modules/input/* $DESTDIR/usr/lib/xorg/modules/input/
 mkdir -p  $DESTDIR/usr/lib/xorg/modules/linux
 cp -ra /usr/lib/xorg/modules/linux/lib*so $DESTDIR/usr/lib/xorg/modules/linux/
fi


# DRIVERS and EXTENSIONS
if [ $XORG = 6 ]; then
 mkdir -p  $DESTDIR/usr/X11R6/lib/modules/drivers
 cp -ra /usr/X11R6/lib/modules/drivers/vesa* $DESTDIR//usr/X11R6/lib/modules/drivers/
 cp -ra /usr/X11R6/lib/modules/drivers/vga* $DESTDIR//usr/X11R6/lib/modules/drivers/
 cp -ra /usr/X11R6/lib/modules/drivers/v4l* $DESTDIR//usr/X11R6/lib/modules/drivers/

 if [ $TCOS_XORG_ALLDRIVERS ]; then
   driver_dir=/usr/X11R6/lib/modules/drivers
   _echo "    xorg: installing all drivers...."
   cp -ra ${driver_dir}/*so $DESTDIR/${driver_dir}/
   rm -f $DESTDIR/${driver_dir}/nvidia_drv.so
 fi

 mkdir -p  $DESTDIR/usr/X11R6/lib/modules/extensions
 cp -ra /usr/X11R6/lib/modules/extensions/lib*.so $DESTDIR/usr/X11R6/lib/modules/extensions/
 # delete nvidia/ati glx module
 rm -f $DESTDIR/usr/X11R6/lib/modules/libglx.so
 rm -f $DESTDIR/usr/X11R6/lib/modules/libwfb.so
 rm -rf $DESTDIR/usr/X11R6/lib/modules/extensions/libGLcore.so
 # delete vnc extension
 rm -f $DESTDIR/usr/X11R6/lib/modules/libvnc.so

 if [ $TCOS_XORG_OPENGL ]; then
    _echo "    * OpenGL support IS ENABLED"
    if [ "$(strings /usr/lib/libGL.so.1|grep -c NVIDIA)" != 0 ] || \
       [ "$(strings /usr/lib/libGL.so.1|grep -c -i fgl)" != 0 ]; then

       if [ -d ${TCOS_PKG_CACHE}/fix-nvidia-ati ]; then
          cpifexists ${TCOS_PKG_CACHE}/fix-nvidia-ati/libGLcore.so /usr/X11R6/lib/modules/extensions
          cpifexists ${TCOS_PKG_CACHE}/fix-nvidia-ati/libglx.so    /usr/X11R6/lib/modules/extensions
          [ -f ${TCOS_PKG_CACHE}/fix-nvidia-ati/libwfb.so ] && \
              cpifexists ${TCOS_PKG_CACHE}/fix-nvidia-ati/libwfb.so /usr/X11R6/lib/modules/
          cpifexists ${TCOS_PKG_CACHE}/fix-nvidia-ati/libGL.so.*   /usr/lib/
          #cp -ra     ${TCOS_PKG_CACHE}/fix-nvidia-ati/libGLU.so.1.* $DESTDIR/usr/lib/
          _echo "       * OpenGL use cached fix-nvidia-ati libs"
       else
          _echo " ********************************************** "
          _echo "    WARNING: NVIDIA/ATI libs found !!!!!!       "
          _echo "                                                "
          _echo "      Please fix with: gentcos -fix-nvidia-ati  "
          _echo "         or uninstall nvidia/ati drivers        "
          _echo "                                                "
          _echo "  OpenGL support will not work on thin clients  "
          _echo " ********************************************** "
       fi

    else
       cpifexists /usr/X11R6/lib/modules/extensions/libGLcore.so /usr/X11R6/lib/modules/extensions
       cpifexists /usr/lib/libGL.so.1  /usr/lib/
       cp -ra     /usr/lib/libGLU.so.1.* $DESTDIR/usr/lib/
    fi
 else
    _echo "    * OpenGL support is not enabled!!"
 fi

else # Xorg 7.x
 mkdir -p  $DESTDIR/usr/lib/xorg/modules/drivers
 # essential xorg drivers
 cp -ra /usr/lib/xorg/modules/drivers/vesa* $DESTDIR/usr/lib/xorg/modules/drivers/
 cp -ra /usr/lib/xorg/modules/drivers/vga* $DESTDIR/usr/lib/xorg/modules/drivers/ >/dev/null 2>&1
 cp -ra /usr/lib/xorg/modules/drivers/v4l* $DESTDIR/usr/lib/xorg/modules/drivers/ >/dev/null 2>&1


 if [ $TCOS_XORG_ALLDRIVERS ]; then
   driver_dir=/usr/lib/xorg/modules/drivers
   _echo "    xorg: installing all drivers...."
   cp -ra ${driver_dir}/*so $DESTDIR/${driver_dir}/
   rm -f $DESTDIR/${driver_dir}/nvidia_drv.so
 fi

 mkdir -p  $DESTDIR/usr/lib/xorg/modules/extensions
 cp -ra /usr/lib/xorg/modules/extensions/lib*.so $DESTDIR/usr/lib/xorg/modules/extensions/
 # delete nvidia/ati glx module
 rm -f $DESTDIR/usr/lib/xorg/modules/extensions/libglx.so
 rm -f $DESTDIR/usr/lib/xorg/modules/libwfb.so
 rm -rf $DESTDIR/usr/lib/xorg/modules/extensions/libGLcore.so
 
 # delete vnc extension
 rm -f $DESTDIR/usr/lib/xorg/modules/extensions/libvnc.so

 if [ $TCOS_XORG_OPENGL ]; then
    _echo "    * OpenGL support is ENABLED"
    if [ "$(strings /usr/lib/libGL.so.1|grep -c NVIDIA)" != 0 ] || \
       [ "$(strings /usr/lib/libGL.so.1|grep -c -i fgl)" != 0 ]; then

       if [ -d ${TCOS_PKG_CACHE}/fix-nvidia-ati ]; then
          rm -rf $DESTDIR/usr/lib/libGL.so*
          cpifexists ${TCOS_PKG_CACHE}/fix-nvidia-ati/libGLcore.so /usr/lib/xorg/modules/extensions/
          cpifexists ${TCOS_PKG_CACHE}/fix-nvidia-ati/libglx.so    /usr/lib/xorg/modules/extensions/
          [ -f ${TCOS_PKG_CACHE}/fix-nvidia-ati/libwfb.so ] && \
              cpifexists ${TCOS_PKG_CACHE}/fix-nvidia-ati/libwfb.so    /usr/lib/xorg/modules/
          cpifexists ${TCOS_PKG_CACHE}/fix-nvidia-ati/libGL.so.*   /usr/lib/
          #cp -ra     ${TCOS_PKG_CACHE}/fix-nvidia-ati/libGLU.so.1.* $DESTDIR/usr/lib/
          _echo "       * OpenGL use cached fix-nvidia-ati libs"
       else
          _echo " ********************************************** "
          _echo "    WARNING: NVIDIA/ATI libs found !!!!!!       "
          _echo "                                                "
          _echo "      Please fix with: gentcos -fix-nvidia-ati  "
          _echo "         or uninstall nvidia/ati drivers        "
          _echo "                                                "
          _echo "  OpenGL support will not work on thin clients  "
          _echo " ********************************************** "
       fi

    else
      cpifexists /usr/lib/xorg/modules/extensions/libglx.so    /usr/lib/xorg/modules/extensions/
      cpifexists /usr/lib/xorg/modules/extensions/libGLcore.so /usr/lib/xorg/modules/extensions/
      cpifexists /usr/lib/libGL.so.1  /usr/lib/
      cp -ra     /usr/lib/libGLU.so.1.* $DESTDIR/usr/lib/
      # delete linked nvidia driver (10Mb)
      rm -f $DESTDIR/usr/lib/libGLcore.so*
    fi
 else
    _echo "    * OpenGL support is not enabled!!"
 fi
 
fi


# keyboard and keymap FIXME in Xorg 6.x
if [ $XORG = 6 ]; then
 cp /usr/X11R6/lib/libxk*.so.1 $DESTDIR/usr/X11R6/lib/
 #cp -ra /etc/X11/xkb $DESTDIR/etc/X11/xkb
 #mkdir -p $DESTDIR/var/lib/xkb
else
 XORG_XKB_DIR=/usr/share/X11/xkb/

 [ ! -d "${XORG_XKB_DIR}" ] && XORG_XKB_DIR=/etc/X11/xkb/

 mkdir -p ${DESTDIR}/usr/share/X11

 # copy all dir (some files not needed)
 cp -ra ${XORG_XKB_DIR} ${DESTDIR}/usr/share/X11

 # delete symlinks
 find ${DESTDIR}/usr/share/X11/ -type l | xargs rm -f --

 # keymap DB
 cpifexists /usr/share/X11/XKeysymDB /usr/share/X11/

fi

# xorg locale
if [ $XORG = 6 ]; then
 mkdir -p $DESTDIR/usr/share/locale
 mkdir -p $DESTDIR/usr/lib/X11
 [ -d /usr/lib/X11/locale ] && copydir /usr/lib/X11/locale/          /usr/lib/X11/
 #copydir /usr/lib/X11/config/          /usr/lib/X11/
 cpifexists /etc/X11/rgb.txt           /etc/X11/
 #copydir /etc/X11/rstart               /etc/X11/
 cpifexists /usr/lib/X11/XKeysymDB     /usr/lib/X11/
 cpifexists /usr/lib/X11/XErrorDB     /usr/lib/X11/
else
 mkdir -p $DESTDIR/usr/share/locale
 mkdir -p $DESTDIR/usr/lib/X11
 [ -d /usr/lib/X11/locale ] && copydir /usr/lib/X11/locale/          /usr/lib/X11/
 #copydir /usr/lib/X11/config/          /usr/lib/X11/
 cpifexists /etc/X11/rgb.txt            /etc/X11/
fi

stat_after "Xorg"

cat <<EOF > $DESTDIR/sbin/killX
#!/bin/sh
echo \"killing xorg process...\"
killall Xorg 2>/dev/null
EOF
chmod +x $DESTDIR/sbin/killX

cat <<EOF > $DESTDIR/sbin/restartxorg
#!/bin/sh

killall Xorg 2>/dev/null

EOF
chmod +x $DESTDIR/sbin/restartxorg


cat <<EOF > $DESTDIR/sbin/startlocalx
#!/bin/sh
export DISPLAY=:0
export HOME=/root

if [ -f \$XAUTHORITY ]; then
  TCOS_XORG_OPTS="\$TCOS_XORG_OPTS -auth \$XAUTHORITY"
fi

/sbin/tryXorg --xorgopts="\${TCOS_XORG_OPTS}" &

xterm  >> /tmp/initramfs.debug 2>&1 &
twm  >> /tmp/initramfs.debug 2>&1 &

# set background color
xsetroot -cursor_name left_ptr -solid "#338899"

EOF
chmod +x $DESTDIR/sbin/startlocalx

cat <<EOF > $DESTDIR/sbin/startnx
#!/bin/sh
. /conf/tcos.conf
. /conf/tcos-run-functions
SERVER=\$(read_server "xdmcp-server")
FONT_SERVER=\$(read_server "font-server")
export DISPLAY=:0
export HOME=/root
export USER_NX_DIR=/root/.nx

if [ -x /usr/bin/ssh ]; then
  ssh -N -p 2022 -l mario -C -2 -L 5000:localhost:2022 ${SERVER}
fi

if [ -f $\XAUTHORITY ]; then
  TCOS_XORG_OPTS="\$TCOS_XORG_OPTS -auth \$XAUTHORITY"
fi

/sbin/tryXorg --fontserver=\${FONT_SERVER} --xorgopts="\${TCOS_XORG_OPTS}" &

# no window manager for freenx
#twm  >> /tmp/initramfs.debug 2>&1 &

sleep 2
# set background color
xsetroot -cursor_name left_ptr -solid "#338899"

/usr/NX/bin/nxclient  >> /tmp/initramfs.debug 2>&1
xterm

EOF
chmod +x $DESTDIR/sbin/startnx

cat <<EOF > $DESTDIR/sbin/startremotex
#!/bin/sh
. /conf/tcos.conf
. /conf/tcos-run-functions
SERVER=\$(read_server "xdmcp-server")
FONT_SERVER=\$(read_server "font-server")
export DISPLAY=:0

if [ -f \$XAUTHORITY ]; then
  TCOS_XORG_OPTS="\$TCOS_XORG_OPTS -auth \$XAUTHORITY"
fi

/sbin/tryXorg --fontserver=\${FONT_SERVER} --server=\${SERVER} --xorgopts="\${TCOS_XORG_OPTS} -query \${SERVER}" &

EOF
chmod +x $DESTDIR/sbin/startremotex


# FIXME, not documented

cat <<EOF > $DESTDIR/sbin/startsshx
#!/bin/sh
. /conf/tcos.conf
. /conf/tcos-run-functions
SERVER=\$(read_server "xdmcp-server")
SERVER=\$(read_server "font-server")
export DISPLAY=:0
export HOME=/root

if [ -f \$XAUTHORITY ]; then
  TCOS_XORG_OPTS="\$TCOS_XORG_OPTS -auth $XAUTHORITY"
fi

/sbin/tryXorg --fontserver=\${FONT_SERVER} --xorgopts="\${TCOS_XORG_OPTS}" &

remoteuser=\$(read_cmdline_var "sshuser" "root")
remotesshhost=\$(read_cmdline_var "sshhost" "\${SERVER}")
remotesshport=\$(read_cmdline_var "sshport" "2022")
# gnome-session, startkde , startxfce4
remotesshdesktop=\$(read_cmdline_var "sshdesktop" "startxfce4")

while [ 1 ]; do
 xterm -e "echo \"SSH \${remoteuser}@\${remotesshhost} -p \${remotesshport}...\" ; ssh -X -C -f -l \${remoteuser} \${remotesshhost} -p \${remotesshport} \${remotesshdesktop}"
done

EOF
chmod +x $DESTDIR/sbin/startsshx


fi # end of TCOS_XORG

