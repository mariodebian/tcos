# Add timeout on usplash startup script

if [ -e $DESTDIR/scripts/init-top/usplash ]; then

  _echo "   * Applying usplash timeout patch"

cat << EOF > $DESTDIR/scripts/init-top/00_nousplash
#!/bin/sh

# new header not using prereqs
if [ "\$1" = "prereqs" ]; then
  echo ""
  exit 0
fi


# kill usplash if cmdline have "nousplash" or "nosplash"
for x in \$(cat /proc/cmdline); do
        case \$x in
        nosplash)
		KILL_USPLASH=true
                ;;
        nousplash)
		KILL_USPLASH=true
                ;;
        esac
done

if [ "\$KILL_USPLASH" = "true" ] ; then
  echo -e "#!/bin/sh\nexit 0" > /scripts/init-top/framebuffer
  echo -e "#!/bin/sh\nexit 0" > /scripts/init-top/usplash
fi


EOF
chmod +x $DESTDIR/scripts/init-top/00_nousplash

cat << EOF >> $DESTDIR/scripts/init-top/usplash


if [ "\$SPLASH" = "true" ]; then
   usplash_write "TEXT Preparing to boot TCOS..."
   usplash_write "TIMEOUT 180"
   usplash_write "SUCCESS ok"
fi


EOF

else 

  _verbose "(95usplash_timeout) Usplash not found, timeout path not applied."

fi


# add fancy startup messages

cat << EOF >> $DESTDIR/scripts/functions

log_use_fancy_output () {
    TPUT=/bin/tput
    EXPR=/bin/expr
    if [ "x\$TERM" != "xdumb" ] && [ -x \$TPUT ] && [ -x \$EXPR ] && \$TPUT hpa 60 >/dev/null 2>&1 && \$TPUT setaf 1 >/dev/null 2>&1; then
        [ -z \$FANCYTTY ] && FANCYTTY=1 || true
    else
        FANCYTTY=0
    fi
    case "\$FANCYTTY" in
        1|Y|yes|true)   true;;
        *)              false;;
    esac
}

FANCYTTY=
[ -e /etc/lsb-base-logging.sh ] && . /etc/lsb-base-logging.sh || true

EOF

[ -e /etc/lsb-base-logging.sh ] && cpifexists /etc/lsb-base-logging.sh /etc
cpifexists /usr/bin/tput /bin
cpifexists /usr/bin/expr /bin

