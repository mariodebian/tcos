/* xmlrpc methods to export thin client info */

#define CUT "busybox cut "
#define SED_SPACES "| sed s/' '//g| sed s/'k'/' k'/g"
#define FREE
/* #define CUT "busybox cut -d: -f 2" */

/* CPU methods */
#define CPU_MODEL "grep \"^model name\" /proc/cpuinfo | "CUT" -d: -f2"
#define CPU_SPEED "grep \"^cpu MHz\" /proc/cpuinfo    | "CUT" -d: -f2"
#define CPU_VENDOR "grep \"^vendor_id\" /proc/cpuinfo | "CUT" -d: -f2"

/* RAM methods */
#define RAM_TOTAL "grep ^MemTotal /proc/meminfo | "CUT" -d: -f2 " SED_SPACES
#define RAM_ACTIVE "grep ^Active /proc/meminfo |  "CUT" -d: -f2 " SED_SPACES
#define RAM_FREE FREE" | grep \"Mem:\"| awk '{print $4\" kB\"}'"
#define RAM_USED FREE" | grep \"Mem:\"| awk '{print $3\" kB\"}'"

/* SWAP methods*/
#define SWAP_AVALAIBLE "grep -c ^/ /proc/swaps"
#define SWAP_TOTAL "free| grep \"Swap:\"| awk '{print $2\" kB\"}'"
#define SWAP_USED "free| grep \"Swap:\"| awk '{print $3\" kB\"}'"
#define SWAP_FREE "free| grep \"Swap:\"| awk '{print $4\" kB\"}'"

/* DATE and version methods */
#define TCOS_DATE "LANG=C date"
#define TCOS_GENERATION_DATE "grep ^TCOS_DATE /conf/tcos.conf| awk -F \"=\" '{print $2}' | sed s/'\"'//g"
#define TCOS_VERSION "grep ^TCOS_VERSION /conf/tcos.conf| awk -F \"=\" '{print $2}' |sed s/'\"'//g"

/* KERNEL methods*/
#define KERNEL_VERSION "busybox uname -r"
#define KERNEL_COMPLETE_VERSION "busybox uname -a"

/* NETWORK methods */
#define IFCONFIG "busybox ifconfig"
#define IFDEV    "eth0"
#define NETWORK_HOSTNAME "hostname"
#define NETWORK_IP    IFCONFIG" " IFDEV " | grep \"inet addr:\"| awk '{print $2}'| awk -F \":\" '{print $2}'"
#define NETWORK_MAC   IFCONFIG" " IFDEV " | grep \"HWaddr\"| awk '{print $5}'"
#define NETWORK_MASK  IFCONFIG" " IFDEV " | grep \"inet addr:\"| awk '{print $4}'| awk -F \":\" '{print $2}'"
#define NETWORK_RX    IFCONFIG" " IFDEV " |grep \"RX bytes\"| awk '{print $3\" \"$4}'| sed s/\"(\"//g| sed s/\")\"//g"
#define NETWORK_TX    IFCONFIG" " IFDEV " |grep \"TX bytes\"| awk '{print $7\" \"$8}'| sed s/\"(\"//g| sed s/\")\"//g"

/* MODULES methods */
#define MODULES_LOADED "for module in $(cat /proc/modules| awk '{print $1}'); do echo -n \"$module \"; done; echo"
#define MODULES_NOTFOUND "needmodules.sh"
#define BIG_BUFFER 5000

/* messages */
#define INFO_UNKNOW "error: Unknow info request"


FILE *popen(const char *orden, const char *tipo);
int pclose(FILE *flujo);

static xmlrpc_value *
tcos_info(xmlrpc_env *env, xmlrpc_value *in, void *ud)
 {
  FILE *fp;
  char line[BIG_BUFFER];
  char *info;
  size_t *len;

  /* read what info search */
  xmlrpc_parse_value(env, in, "(s#)", &info, &len);

#ifdef DEBUG
/*  fprintf(stderr, "tcosxmlrpc::tcos_info() searching for info=\"%s\"\n", info); */
#endif

  /* CPU METHODS */
  if ( strcmp(info, "cpu_model") == 0 )
      fp=(FILE*)popen(CPU_MODEL, "r");
  else if ( strcmp(info, "cpu_speed" ) == 0)
      fp=(FILE*)popen(CPU_SPEED, "r");
  else if ( strcmp(info, "cpu_vendor" ) == 0)
      fp=(FILE*)popen(CPU_VENDOR, "r");

  /* RAM METHODS */
  else if ( strcmp(info, "ram_total" ) == 0)
      fp=(FILE*)popen(RAM_TOTAL, "r");
  else if ( strcmp(info, "ram_active" ) == 0)
      fp=(FILE*)popen(RAM_ACTIVE, "r");
  else if ( strcmp(info, "ram_free" ) == 0)
      fp=(FILE*)popen(RAM_FREE, "r");
  else if ( strcmp(info, "ram_used" ) == 0)
      fp=(FILE*)popen(RAM_USED, "r");

  /* SWAP METHODS */
  else if ( strcmp(info, "swap_avalaible" ) == 0)
      fp=(FILE*)popen(SWAP_AVALAIBLE, "r");
  else if ( strcmp(info, "swap_total" ) == 0)
      fp=(FILE*)popen(SWAP_TOTAL, "r");
  else if ( strcmp(info, "swap_used" ) == 0)
      fp=(FILE*)popen(SWAP_USED, "r");
  else if ( strcmp(info, "swap_free" ) == 0)
      fp=(FILE*)popen(SWAP_FREE, "r");

  /* TCOS METHODS */
  else if ( strcmp(info, "tcos_date" ) == 0)
      fp=(FILE*)popen(TCOS_DATE, "r");
  else if ( strcmp(info, "tcos_generation_date" ) == 0)
      fp=(FILE*)popen(TCOS_GENERATION_DATE, "r");
  else if ( strcmp(info, "tcos_version" ) == 0)
      fp=(FILE*)popen(TCOS_VERSION, "r");

  /* KERNEL METHODS*/
  else if ( strcmp(info, "kernel_version" ) == 0)
      fp=(FILE*)popen(KERNEL_VERSION, "r");
  else if ( strcmp(info, "kernel_complete_version" ) == 0)
      fp=(FILE*)popen(KERNEL_COMPLETE_VERSION, "r");

  /* NETWORK METHODS */  
  else if ( strcmp(info, "network_hostname" ) == 0)
      fp=(FILE*)popen(NETWORK_HOSTNAME, "r");
  else if ( strcmp(info, "network_ip" ) == 0)
      fp=(FILE*)popen(NETWORK_IP, "r");
  else if ( strcmp(info, "network_mac" ) == 0)
      fp=(FILE*)popen(NETWORK_MAC, "r");
  else if ( strcmp(info, "network_mask" ) == 0)
      fp=(FILE*)popen(NETWORK_MASK, "r");
  else if ( strcmp(info, "network_rx" ) == 0)
      fp=(FILE*)popen(NETWORK_RX, "r");
  else if ( strcmp(info, "network_tx" ) == 0)
      fp=(FILE*)popen(NETWORK_TX, "r");

  /* MODULES METHODS */  
  else if ( strcmp(info, "modules_loaded" ) == 0)
      fp=(FILE*)popen(MODULES_LOADED, "r");
  else if ( strcmp(info, "modules_notfound" ) == 0)
      fp=(FILE*)popen(MODULES_NOTFOUND, "r");

  /* default method = error */
  else
      return xmlrpc_build_value(env, "s", INFO_UNKNOW );

#ifdef DEBUG
/*  fprintf(stderr, "tcosxmlrpc::tcos_info() reading pipe\n"); */
#endif

  if (fp == NULL)
	return xmlrpc_build_value(env, "s", INFO_UNKNOW );

  /* fscanf(fp , "%s\n", line); */
  fgets( line, sizeof line, fp);

#ifdef DEBUG
/*  fprintf(stderr, "tcosxmlrpc::tcos_info() line=\"%s\"\n", line); */
#endif

  pclose(fp);
  return xmlrpc_build_value(env, "s", line );  
}




